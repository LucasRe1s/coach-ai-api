// Teste dos Middlewares de Erro - Coach AI API
// Execute este arquivo para testar os middlewares

const axios = require('axios');

const BASE_URL = 'http://localhost:3000';

async function testMiddlewares() {
  console.log('üß™ Testando Middlewares de Erro\n');

  try {
    // Teste 1: Rota n√£o encontrada
    console.log('1Ô∏è‚É£ Testando rota n√£o encontrada...');
    try {
      await axios.get(`${BASE_URL}/rota-inexistente`);
    } catch (error) {
      console.log('‚úÖ Erro 404 capturado corretamente');
      console.log('Status:', error.response.status);
      console.log('Mensagem:', error.response.data.error.message);
    }

    // Teste 2: Valida√ß√£o de dados inv√°lidos
    console.log('\n2Ô∏è‚É£ Testando valida√ß√£o de dados inv√°lidos...');
    try {
      await axios.post(`${BASE_URL}/users`, {
        name: '', // Nome vazio
        email: 'email-invalido', // Email inv√°lido
        password: '123' // Senha muito curta
      });
    } catch (error) {
      console.log('‚úÖ Erro de valida√ß√£o capturado corretamente');
      console.log('Status:', error.response.status);
      console.log('C√≥digo:', error.response.data.error.code);
      console.log('Detalhes:', error.response.data.error.details);
    }

    // Teste 3: JSON inv√°lido
    console.log('\n3Ô∏è‚É£ Testando JSON inv√°lido...');
    try {
      await axios.post(`${BASE_URL}/users`, 'json-invalido', {
        headers: { 'Content-Type': 'application/json' }
      });
    } catch (error) {
      console.log('‚úÖ Erro de JSON inv√°lido capturado corretamente');
      console.log('Status:', error.response.status);
      console.log('Mensagem:', error.response.data.error.message);
    }

    // Teste 4: Autentica√ß√£o sem token
    console.log('\n4Ô∏è‚É£ Testando autentica√ß√£o sem token...');
    try {
      await axios.get(`${BASE_URL}/users`);
    } catch (error) {
      console.log('‚úÖ Erro de autentica√ß√£o capturado corretamente');
      console.log('Status:', error.response.status);
      console.log('C√≥digo:', error.response.data.error.code);
    }

    // Teste 5: Cria√ß√£o de usu√°rio v√°lida
    console.log('\n5Ô∏è‚É£ Testando cria√ß√£o de usu√°rio v√°lida...');
    try {
      const response = await axios.post(`${BASE_URL}/users`, {
        name: 'Jo√£o Silva',
        email: 'joao@example.com',
        password: '123456'
      });
      console.log('‚úÖ Usu√°rio criado com sucesso');
      console.log('Status:', response.status);
      console.log('Dados:', response.data);
    } catch (error) {
      console.log('‚ùå Erro inesperado na cria√ß√£o de usu√°rio');
      console.log('Status:', error.response?.status);
      console.log('Mensagem:', error.response?.data?.error?.message);
    }

    // Teste 6: Conversa n√£o encontrada
    console.log('\n6Ô∏è‚É£ Testando conversa n√£o encontrada...');
    try {
      await axios.get(`${BASE_URL}/conversation/999`);
    } catch (error) {
      console.log('‚úÖ Erro de conversa n√£o encontrada capturado corretamente');
      console.log('Status:', error.response.status);
      console.log('C√≥digo:', error.response.data.error.code);
    }

    // Teste 7: Cria√ß√£o de mensagem v√°lida
    console.log('\n7Ô∏è‚É£ Testando cria√ß√£o de mensagem v√°lida...');
    try {
      const response = await axios.post(`${BASE_URL}/conversation`, {
        message: 'Ol√°, como voc√™ pode me ajudar com m√∫sica?'
      });
      console.log('‚úÖ Mensagem criada com sucesso');
      console.log('Status:', response.status);
      console.log('Dados:', response.data);
    } catch (error) {
      console.log('‚ùå Erro inesperado na cria√ß√£o de mensagem');
      console.log('Status:', error.response?.status);
      console.log('Mensagem:', error.response?.data?.error?.message);
    }

    console.log('\nüéâ Todos os testes conclu√≠dos!');

  } catch (error) {
    console.error('‚ùå Erro geral nos testes:', error.message);
  }
}

// Verificar se o servidor est√° rodando
async function checkServer() {
  try {
    await axios.get(`${BASE_URL}/health`);
    console.log('‚úÖ Servidor est√° rodando');
    return true;
  } catch (error) {
    console.log('‚ùå Servidor n√£o est√° rodando. Inicie o servidor primeiro:');
    console.log('npm run dev');
    return false;
  }
}

// Executar testes
async function runTests() {
  const serverRunning = await checkServer();
  if (serverRunning) {
    await testMiddlewares();
  }
}

runTests(); 